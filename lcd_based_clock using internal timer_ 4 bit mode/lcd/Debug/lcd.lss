
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800108  00800108  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000049b  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a1  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037c  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  000011ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  9e:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer_init>:
	sei();
}

void timer_off(void)
{
	TCCR1B =0;
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8d 60       	ori	r24, 0x0D	; 13
  ae:	80 83       	st	Z, r24
  b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  b8:	ef e6       	ldi	r30, 0x6F	; 111
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	9d e3       	ldi	r25, 0x3D	; 61
  c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  ce:	78 94       	sei
  d0:	08 95       	ret

000000d2 <__vector_11>:
}


ISR (TIMER1_COMPA_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  sec++;	
  de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sec>
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <sec>
  
  e8:	8f 91       	pop	r24
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <lcd_init>:
#define en (1<<1)  //en is set to pin no 1 
#define data_bus PORTD //portd is outputed to lcd data bus

void lcd_init(void)
{
DDRD = 0xFF; // Port d is set as input
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a b9       	out	0x0a, r24	; 10
PORTD = 0; // port d is set to 0; 
  f8:	1b b8       	out	0x0b, r1	; 11
DDRB |= rs; // rs pin is set as ouput 
  fa:	20 9a       	sbi	0x04, 0	; 4
PORTB &= ~(rs);
  fc:	28 98       	cbi	0x05, 0	; 5
DDRB |= en;
  fe:	21 9a       	sbi	0x04, 1	; 4
PORTB &= ~(en);
 100:	29 98       	cbi	0x05, 1	; 5
 102:	08 95       	ret

00000104 <lcd_command>:
}

void lcd_command(unsigned char command)
{
			data_bus=command;
 104:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(rs);
 106:	28 98       	cbi	0x05, 0	; 5
			PORTB |= en;
 108:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	85 ed       	ldi	r24, 0xD5	; 213
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_command+0x8>
 110:	00 00       	nop
			_delay_us(40);
			PORTB &= ~(en);
 112:	29 98       	cbi	0x05, 1	; 5
 114:	08 95       	ret

00000116 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	data_bus=data;
 116:	8b b9       	out	0x0b, r24	; 11
	PORTB |= rs;
 118:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= en;
 11a:	29 9a       	sbi	0x05, 1	; 5
 11c:	85 ed       	ldi	r24, 0xD5	; 213
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_data+0x8>
 122:	00 00       	nop
	_delay_us(40);
	PORTB &= ~(en);
 124:	29 98       	cbi	0x05, 1	; 5
 126:	08 95       	ret

00000128 <SendString>:
}

void SendString(char *str)
{
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	fc 01       	movw	r30, r24
	unsigned char i=0;
	while(str[i]!='\0')
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	59 f0       	breq	.+22     	; 0x14c <SendString+0x24>
 136:	8f 01       	movw	r16, r30
 138:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_data(str[i]);
 13a:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
		i++;
 13e:	cf 5f       	subi	r28, 0xFF	; 255
}

void SendString(char *str)
{
	unsigned char i=0;
	while(str[i]!='\0')
 140:	f8 01       	movw	r30, r16
 142:	ec 0f       	add	r30, r28
 144:	f1 1d       	adc	r31, r1
 146:	80 81       	ld	r24, Z
 148:	81 11       	cpse	r24, r1
 14a:	f7 cf       	rjmp	.-18     	; 0x13a <SendString+0x12>
	{
		lcd_data(str[i]);
		i++;
	}
 14c:	cf 91       	pop	r28
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <main>:

unsigned char sec,minute,hour;

int main(void)
{
   lcd_init();
 154:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_init>
   timer_init();
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <timer_init>
   lcd_command(0x38);
 15c:	88 e3       	ldi	r24, 0x38	; 56
 15e:	0e 94 82 00 	call	0x104	; 0x104 <lcd_command>
   lcd_command(0x01);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 82 00 	call	0x104	; 0x104 <lcd_command>
   
   while(1)
   {
	lcd_command(0x80);
	SendString("Time =");
	lcd_data((hour/10)%10+48);
 168:	cd ec       	ldi	r28, 0xCD	; 205
   lcd_command(0x38);
   lcd_command(0x01);
   
   while(1)
   {
	lcd_command(0x80);
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	0e 94 82 00 	call	0x104	; 0x104 <lcd_command>
	SendString("Time =");
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 94 00 	call	0x128	; 0x128 <SendString>
	lcd_data((hour/10)%10+48);
 178:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour>
 17c:	8c 9f       	mul	r24, r28
 17e:	81 2d       	mov	r24, r1
 180:	11 24       	eor	r1, r1
 182:	86 95       	lsr	r24
 184:	86 95       	lsr	r24
 186:	86 95       	lsr	r24
 188:	8c 9f       	mul	r24, r28
 18a:	91 2d       	mov	r25, r1
 18c:	11 24       	eor	r1, r1
 18e:	96 95       	lsr	r25
 190:	96 95       	lsr	r25
 192:	96 95       	lsr	r25
 194:	99 0f       	add	r25, r25
 196:	29 2f       	mov	r18, r25
 198:	22 0f       	add	r18, r18
 19a:	22 0f       	add	r18, r18
 19c:	92 0f       	add	r25, r18
 19e:	89 1b       	sub	r24, r25
 1a0:	80 5d       	subi	r24, 0xD0	; 208
 1a2:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	lcd_data((hour)%10+48);
 1a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour>
 1aa:	8c 9f       	mul	r24, r28
 1ac:	91 2d       	mov	r25, r1
 1ae:	11 24       	eor	r1, r1
 1b0:	96 95       	lsr	r25
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	99 0f       	add	r25, r25
 1b8:	29 2f       	mov	r18, r25
 1ba:	22 0f       	add	r18, r18
 1bc:	22 0f       	add	r18, r18
 1be:	92 0f       	add	r25, r18
 1c0:	89 1b       	sub	r24, r25
 1c2:	80 5d       	subi	r24, 0xD0	; 208
 1c4:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	lcd_data(':');
 1c8:	8a e3       	ldi	r24, 0x3A	; 58
 1ca:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	
	lcd_data((minute/10)%10+48);
 1ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 1d2:	8c 9f       	mul	r24, r28
 1d4:	81 2d       	mov	r24, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	86 95       	lsr	r24
 1da:	86 95       	lsr	r24
 1dc:	86 95       	lsr	r24
 1de:	8c 9f       	mul	r24, r28
 1e0:	91 2d       	mov	r25, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	96 95       	lsr	r25
 1e6:	96 95       	lsr	r25
 1e8:	96 95       	lsr	r25
 1ea:	99 0f       	add	r25, r25
 1ec:	29 2f       	mov	r18, r25
 1ee:	22 0f       	add	r18, r18
 1f0:	22 0f       	add	r18, r18
 1f2:	92 0f       	add	r25, r18
 1f4:	89 1b       	sub	r24, r25
 1f6:	80 5d       	subi	r24, 0xD0	; 208
 1f8:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	lcd_data((minute)%10+48);
 1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 200:	8c 9f       	mul	r24, r28
 202:	91 2d       	mov	r25, r1
 204:	11 24       	eor	r1, r1
 206:	96 95       	lsr	r25
 208:	96 95       	lsr	r25
 20a:	96 95       	lsr	r25
 20c:	99 0f       	add	r25, r25
 20e:	29 2f       	mov	r18, r25
 210:	22 0f       	add	r18, r18
 212:	22 0f       	add	r18, r18
 214:	92 0f       	add	r25, r18
 216:	89 1b       	sub	r24, r25
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	lcd_data(':');
 21e:	8a e3       	ldi	r24, 0x3A	; 58
 220:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	
	lcd_data((sec/10)%10+48);
 224:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sec>
 228:	8c 9f       	mul	r24, r28
 22a:	81 2d       	mov	r24, r1
 22c:	11 24       	eor	r1, r1
 22e:	86 95       	lsr	r24
 230:	86 95       	lsr	r24
 232:	86 95       	lsr	r24
 234:	8c 9f       	mul	r24, r28
 236:	91 2d       	mov	r25, r1
 238:	11 24       	eor	r1, r1
 23a:	96 95       	lsr	r25
 23c:	96 95       	lsr	r25
 23e:	96 95       	lsr	r25
 240:	99 0f       	add	r25, r25
 242:	29 2f       	mov	r18, r25
 244:	22 0f       	add	r18, r18
 246:	22 0f       	add	r18, r18
 248:	92 0f       	add	r25, r18
 24a:	89 1b       	sub	r24, r25
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	lcd_data((sec)%10+48);
 252:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sec>
 256:	8c 9f       	mul	r24, r28
 258:	91 2d       	mov	r25, r1
 25a:	11 24       	eor	r1, r1
 25c:	96 95       	lsr	r25
 25e:	96 95       	lsr	r25
 260:	96 95       	lsr	r25
 262:	99 0f       	add	r25, r25
 264:	29 2f       	mov	r18, r25
 266:	22 0f       	add	r18, r18
 268:	22 0f       	add	r18, r18
 26a:	92 0f       	add	r25, r18
 26c:	89 1b       	sub	r24, r25
 26e:	80 5d       	subi	r24, 0xD0	; 208
 270:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
	if(sec>=59)
 274:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <sec>
 278:	8b 33       	cpi	r24, 0x3B	; 59
 27a:	38 f0       	brcs	.+14     	; 0x28a <main+0x136>
	{
		sec=0;
 27c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sec>
		minute++;
 280:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	}
	
	if(minute>=59)
 28a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 28e:	8b 33       	cpi	r24, 0x3B	; 59
 290:	48 f0       	brcs	.+18     	; 0x2a4 <main+0x150>
	{
		sec=0;
 292:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sec>
		minute=0;
 296:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		hour++;
 29a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <hour>
	}
	
	if(hour>=12)
 2a4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <hour>
 2a8:	8c 30       	cpi	r24, 0x0C	; 12
 2aa:	08 f4       	brcc	.+2      	; 0x2ae <main+0x15a>
 2ac:	5e cf       	rjmp	.-324    	; 0x16a <main+0x16>
	{
		sec=0;
 2ae:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <sec>
		minute=0;
 2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
		hour=0;
 2b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <hour>
 2ba:	57 cf       	rjmp	.-338    	; 0x16a <main+0x16>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
