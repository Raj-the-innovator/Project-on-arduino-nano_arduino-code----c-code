
lcd_rtc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8b  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000829  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ae  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044d  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034f  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  9e:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
	TCCR1B =0; // turn off the timer1
}


ISR (TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  sec++;	 // sec for increment after 1 sec 
  b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sec>
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sec>
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <lcd_init>:
#define en (1<<1)  //en is set to pin no 1 
#define data_bus PORTD //portd pin 2,3,4,5 as 4 bit is outputed to lcd data bus 4 pins 

void lcd_init(void)
{
DDRD |= (1<<4) | (1<<5) | (1<<6) | (1<<7); // Port d 4 pin (d4,5,6,7)is set as output
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 6f       	ori	r24, 0xF0	; 240
  cc:	8a b9       	out	0x0a, r24	; 10
PORTD &= ~(1<<4) | ~(1<<5) | ~(1<<6) | ~(1<<7); // port d is set to 0; 
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8b b9       	out	0x0b, r24	; 11
DDRB |= rs; // rs pin is set as ouput 
  d2:	20 9a       	sbi	0x04, 0	; 4
PORTB &= ~(rs); // rs pin is pull up transistor is on 
  d4:	28 98       	cbi	0x05, 0	; 5
DDRB |= en; //en pin is set as ouput
  d6:	21 9a       	sbi	0x04, 1	; 4
PORTB &= ~(en); //en pin is pull up transistor is on
  d8:	29 98       	cbi	0x05, 1	; 5
  da:	08 95       	ret

000000dc <lcd_command>:
 }

void lcd_command(unsigned char command)
{
			data_bus=(data_bus & 0x0F) | (command & 0xF0); //higher order nibble command is put on port d to lcd bus
  dc:	9b b1       	in	r25, 0x0b	; 11
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	28 2f       	mov	r18, r24
  e2:	20 7f       	andi	r18, 0xF0	; 240
  e4:	92 2b       	or	r25, r18
  e6:	9b b9       	out	0x0b, r25	; 11
			PORTB &= ~(rs); //command register is selected
  e8:	28 98       	cbi	0x05, 0	; 5
			PORTB |= en;  // high to low transition for falling edge triger lcd
  ea:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	3a e6       	ldi	r19, 0x6A	; 106
  ee:	3a 95       	dec	r19
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_command+0x12>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_command+0x18>
			_delay_us(40); //refresh time
			PORTB &= ~(en);
  f4:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	ef e9       	ldi	r30, 0x9F	; 159
  f8:	ff e0       	ldi	r31, 0x0F	; 15
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_command+0x1e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_command+0x24>
 100:	00 00       	nop
			_delay_ms(2);
			data_bus=(data_bus & 0x0F) | (command << 4); //lower order nibble command is put on port d to lcd bus
 102:	2b b1       	in	r18, 0x0b	; 11
 104:	2f 70       	andi	r18, 0x0F	; 15
 106:	f0 e1       	ldi	r31, 0x10	; 16
 108:	8f 9f       	mul	r24, r31
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	82 2b       	or	r24, r18
 110:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(rs); //command register is selected
 112:	28 98       	cbi	0x05, 0	; 5
			PORTB |= en;  // high to low transition for falling edge triger lcd
 114:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	3a e6       	ldi	r19, 0x6A	; 106
 118:	3a 95       	dec	r19
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_command+0x3c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_command+0x42>
			_delay_us(40); //refresh time
			PORTB &= ~(en);
 11e:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_command+0x48>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_command+0x4e>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <lcd_data>:
			
}

void lcd_data(unsigned char data)
{
	data_bus=(data_bus & 0x0F) | (data & 0xF0); //higher order nibble data is put on port d to lcd bus
 12e:	9b b1       	in	r25, 0x0b	; 11
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	28 2f       	mov	r18, r24
 134:	20 7f       	andi	r18, 0xF0	; 240
 136:	92 2b       	or	r25, r18
 138:	9b b9       	out	0x0b, r25	; 11
	PORTB |= rs;  // data register is selected
 13a:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= en; // high to low transition for falling edge triger lcd
 13c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	3a e6       	ldi	r19, 0x6A	; 106
 140:	3a 95       	dec	r19
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_data+0x12>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_data+0x18>
	_delay_us(40); //refresh time
	PORTB &= ~(en);
 146:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	ef e9       	ldi	r30, 0x9F	; 159
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_data+0x1e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <lcd_data+0x24>
 152:	00 00       	nop
	_delay_ms(2);
	data_bus=(data_bus & 0x0F) | (data << 4); //lower order nibble data is put on port d to lcd bus
 154:	2b b1       	in	r18, 0x0b	; 11
 156:	2f 70       	andi	r18, 0x0F	; 15
 158:	f0 e1       	ldi	r31, 0x10	; 16
 15a:	8f 9f       	mul	r24, r31
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	82 2b       	or	r24, r18
 162:	8b b9       	out	0x0b, r24	; 11
	PORTB |= rs;  // data register is selected
 164:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= en; // high to low transition for falling edge triger lcd
 166:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	3a e6       	ldi	r19, 0x6A	; 106
 16a:	3a 95       	dec	r19
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_data+0x3c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_data+0x42>
	_delay_us(40); //refresh time
	PORTB &= ~(en);
 170:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e9       	ldi	r24, 0x9F	; 159
 174:	9f e0       	ldi	r25, 0x0F	; 15
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_data+0x48>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_data+0x4e>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <SendString>:
	_delay_ms(2);
}

void SendString(char *str)
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	fc 01       	movw	r30, r24
	unsigned char i=0; //i is declare as char for pointer
	while(str[i]!='\0') // checking for null char
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	59 f0       	breq	.+22     	; 0x1a4 <SendString+0x24>
 18e:	8f 01       	movw	r16, r30
 190:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd_data(str[i]); // print that char on lcd
 192:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_data>
		i++; //incrementing i to next char 
 196:	cf 5f       	subi	r28, 0xFF	; 255
}

void SendString(char *str)
{
	unsigned char i=0; //i is declare as char for pointer
	while(str[i]!='\0') // checking for null char
 198:	f8 01       	movw	r30, r16
 19a:	ec 0f       	add	r30, r28
 19c:	f1 1d       	adc	r31, r1
 19e:	80 81       	ld	r24, Z
 1a0:	81 11       	cpse	r24, r1
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <SendString+0x12>
	{
		lcd_data(str[i]); // print that char on lcd
		i++; //incrementing i to next char 
	}
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <main>:

unsigned char sec,minute,hour; // initialze sec,minute and hour

int main(void)
{
   lcd_init(); //lcd is initialize
 1ac:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_init>
 //  timer_init(); //timer is initialize
   lcd_command(0x02);  // lcd in 4 bit interfacing
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
   lcd_command(0x28); // lcd is initialze 8 bit mode and 16*2 rows and column
 1b6:	88 e2       	ldi	r24, 0x28	; 40
 1b8:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
   lcd_command(0x0C);
 1bc:	8c e0       	ldi	r24, 0x0C	; 12
 1be:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
   lcd_command(0x01); // clear the screen
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
   lcd_command(0x80);
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_command>
   SendString("Wed");
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 c0 00 	call	0x180	; 0x180 <SendString>
 //  lcd_command(0xC0);
 //  SendString("  raj lab");
}
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
